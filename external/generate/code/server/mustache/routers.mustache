{{>partial_header}}
package router

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/parpa/golang-gin-openapi/server/service/controller"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	// inject middleware
	UseMiddleware(router)
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

var routes = Routes{
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

	{
		"{{operationId}}",
		http.Method{{httpMethod}},
		"{{{basePathWithoutHost}}}{{{path}}}",
		controller.{{operationId}},
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
